#!/usr/bin/env ruby
# Converts RAW Polar training session data files in TCX file format.

require 'nokogiri'
require "#{File.dirname(__FILE__)}/lib/polar_data_parser"

def usage
  puts "Usage:"
  puts "  #{__FILE__} <directory> [<tcx file>]"
end

dir = ARGV[0]
unless dir
  usage
  exit -2
end

output_file = ARGV[1] || File.join(dir, 'output.tcx')

def output_tcx(parsed)
  sport = parsed[:sport]
  training_session = parsed[:training_session]
  sensors = parsed[:sensors]
  samples = parsed[:samples]
  exercise = parsed[:exercise]
  laps = parsed[:exercise_laps]
  exercise_stats = parsed[:exercise_stats]
  route_samples = parsed[:route_samples]

  start = DateTime.new(training_session.start.date.year, training_session.start.date.month, training_session.start.date.day, training_session.start.time.hour, training_session.start.time.minute, training_session.start.time.seconds, "%+i" % (training_session.start.time_zone_offset / 60)).to_time.utc

  recording_interval = samples.recording_interval.hours * 3600 + samples.recording_interval.minutes * 60 + samples.recording_interval.seconds + (samples.recording_interval.millis.to_f / 1000)
  samples_count = samples.speed_samples.count
  laps_count = laps ? laps.laps.count : 0
  route_samples_count = route_samples.latitude.count

  first_gps_fix = route_samples_count > 0 ? DateTime.new(route_samples.first_location_time.date.year, route_samples.first_location_time.date.month, route_samples.first_location_time.date.day, route_samples.first_location_time.time.hour, route_samples.first_location_time.time.minute, route_samples.first_location_time.time.seconds, '+0').to_time.utc : nil
  time_to_first_gps_fix = first_gps_fix.to_i - start.to_i

  altitude_delta = 0
  altitude_calibration_samples = samples.altitude_calibration.each do |s|
    if s.operation == PbOperationType::SUM
      altitude_delta = s.value
    else
      STDERR.puts "Warning: Altitude calibration data of unsupported operation type ignored"
    end
  end if samples.altitude_calibration

  builder = Nokogiri::XML::Builder.new(:encoding => 'UTF-8') do |xml|
    xml.TrainingCenterDatabase('xmlns' => "http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2") {
      xml.Activities {
        sport = case sport.identifier.value
                when 1
                  "Running"
                else
                  "Other"
                end
        xml.Activity('Sport' => sport) {
          xml.Id start.strftime("%Y-%m-%dT%H:%M:%S.000Z")
          datetime = start
          i = 0
          laps.laps.each_with_index do |lap, j|
            split_time = pb_duration_to_float lap.header.split_time
            duration = pb_duration_to_float lap.header.duration
            xml.Lap('StartTime' => datetime.strftime("%Y-%m-%dT%H:%M:%S.000Z")) {
              xml.TotalTimeSeconds duration
              xml.DistanceMeters lap.header.distance
              xml.MaximumSpeed lap.statistics.speed.maximum.to_f * 1000 / 3600 if lap.statistics.speed
              xml.Calories j == 0 ? exercise.calories : 0
              if lap.statistics.heart_rate
                xml.AverageHeartRateBpm {
                  xml.Value lap.statistics.heart_rate.average
                }
                xml.MaximumHeartRateBpm {
                  xml.Value lap.statistics.heart_rate.maximum
                }
              end
              xml.Intensity 'Active'
              xml.Cadence lap.statistics.cadence.average if lap.statistics.cadence
              xml.TriggerMethod 'Manual'
              xml.Track {
                prev_distance = 0
                first_lap_sample = true
                while datetime < start + split_time
                  xml.Trackpoint {
                    xml.Time datetime.strftime("%Y-%m-%dT%H:%M:%S.000Z")
                    if route_samples.latitude[i]
                      xml.Position {
                        xml.LatitudeDegrees route_samples.latitude[i].round(8)
                        xml.LongitudeDegrees route_samples.longitude[i].round(8)
                      }
                      xml.AltitudeMeters (samples.altitude_samples[i] + altitude_delta).round(3) if samples.altitude_samples[i]
                      if samples.distance_samples[i] && (first_lap_sample || samples.distance_samples[i] != prev_distance)
                        xml.DistanceMeters (prev_distance = samples.distance_samples[i])
                      end
                      if samples.heart_rate_samples[i]
                        xml.HeartRateBpm {
                          xml.Value samples.heart_rate_samples[i]
                        }
                      end
                      xml.Cadence samples.cadence_samples[i] if samples.cadence_samples[i]
                      xml.SensorState 'Present'
                      first_lap_sample = false
                    end
                  }

                  i += 1
                  datetime += recording_interval
                end
              }
              xml.Extensions {
                xml.LX {
                  xml.AvgSpeed lap.statistics.speed.average.to_f * 1000 / 3600 if lap.statistics.speed
                }
              }
            }
          end
          xml.Training('VirtualPartner' => false) {
            xml.Plan('Type' => 'Workout', 'IntervalWorkout' => false) {
              xml.Name training_session.session_name.text
              xml.Extensions {}
            }
          }
          xml.Creator("xmlns:xsi" => "http://www.w3.org/2001/XMLSchema-instance", 'xsi:type' => 'Device_t') {
            xml.Name training_session.model_name
            xml.UnitId 0
            xml.ProductID training_session.model_name == 'Polar V800' ? 13 : 0
            xml.Version {
              xml.VersionMajor 0
              xml.VersionMinor 0
              xml.BuildMajor 0
              xml.BuildMinor 0
            }
          }
        }
      }
      xml.Author('xmlns:xsi' => "http://www.w3.org/2001/XMLSchema-instance", 'xsi:type' => 'Application_t') {
        xml.Name 'https://github.com/cmaion/polar'
        xml.Build {
          xml.Version {
            xml.VersionMajor 0
            xml.VersionMinor 0
          }
        }
        xml.LangID 'EN'
        xml.PartNumber 'XXX-XXXXX-XX'
      }
    }
  end
  builder.to_xml
end

puts "Converting Polar training session in '#{dir}' to TCX format as '#{output_file}'..."
parsed = PolarDataParser.parse_training_session(dir)
if parsed.key?(:training_session)
  File.open(output_file, 'w') do |f|
    f << output_tcx(parsed)
  end
  puts "Done"
else
  puts "Error: couldn't find training session"
end
