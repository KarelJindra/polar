#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

begin; require 'types.pb'; rescue LoadError; end
begin; require 'structures.pb'; rescue LoadError; end
begin; require 'exercise_rr_samples.pb'; rescue LoadError; end

module PolarData
  # forward declarations
  class PbPowerMeasurements < ::ProtocolBuffers::Message; end
  class PbCalibrationValue < ::ProtocolBuffers::Message; end
  class PbExerciseSamples < ::ProtocolBuffers::Message; end

  class PbPowerMeasurements < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbPowerMeasurements"

    required :int32, :current_power, 1
    optional :uint32, :cumulative_crank_revolutions, 2
    optional :uint32, :cumulative_timestamp, 3
    optional :sint32, :force_magnitude_min, 4
    optional :int32, :force_magnitude_max, 5
    optional :uint32, :force_magnitude_min_angle, 6
    optional :uint32, :force_magnitude_max_angle, 7
    optional :uint32, :bottom_dead_spot_angle, 8
    optional :uint32, :top_dead_spot_angle, 9
  end

  class PbCalibrationValue < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbCalibrationValue"

    required :uint32, :start_index, 1
    required :float, :value, 2
    required ::PbOperationType, :operation, 3
    optional ::PbMovingType, :cause, 4
  end

  class PbExerciseSamples < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbExerciseSamples"

    required ::PbDuration, :recording_interval, 1
    repeated :uint32, :heart_rate_samples, 2, :packed => true 
    repeated ::PbSensorOffline, :heart_rate_offline, 3
    repeated :uint32, :cadence_samples, 4, :packed => true 
    repeated ::PbSensorOffline, :cadence_offline, 5
    repeated :float, :altitude_samples, 6, :packed => true 
    repeated ::PbSensorOffline, :altitude_offline, 18
    repeated ::PolarData::PbCalibrationValue, :altitude_calibration, 7
    repeated :float, :temperature_samples, 8, :packed => true 
    repeated ::PbSensorOffline, :temperature_offline, 19
    repeated :float, :speed_samples, 9, :packed => true 
    repeated ::PbSensorOffline, :speed_offline, 10
    repeated :float, :distance_samples, 11, :packed => true 
    repeated ::PbSensorOffline, :distance_offline, 12
    repeated :uint32, :stride_length_samples, 13
    repeated ::PbSensorOffline, :stride_length_offline, 14
    repeated ::PolarData::PbCalibrationValue, :stride_calibration, 15
    repeated :float, :forward_acceleration, 16
    repeated ::PbSensorOffline, :forward_acceleration_offline, 20
    repeated ::PbMovingType, :moving_type_samples, 17
    repeated ::PbSensorOffline, :moving_type_offline, 21
    repeated ::PolarData::PbPowerMeasurements, :left_pedal_power_samples, 22
    repeated ::PbSensorOffline, :left_pedal_power_offline, 23
    repeated ::PolarData::PbPowerMeasurements, :right_pedal_power_samples, 24
    repeated ::PbSensorOffline, :right_pedal_power_offline, 25
    repeated ::PolarData::PbCalibrationValue, :left_power_calibration, 26
    repeated ::PolarData::PbCalibrationValue, :right_power_calibration, 27
    optional ::PolarData::PbExerciseRRIntervals, :rr_samples, 28
    repeated ::PbPauseTime, :pause_times, 30
  end

end
