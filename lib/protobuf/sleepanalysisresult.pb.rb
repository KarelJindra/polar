#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

begin; require 'types.pb'; rescue LoadError; end
begin; require 'structures.pb'; rescue LoadError; end

module PolarData
  # forward declarations
  class PbSleepWakePhase < ::ProtocolBuffers::Message; end
  class PbSleepAnalysisResult < ::ProtocolBuffers::Message; end

  # enums
  module PbSleepWakeState
    include ::ProtocolBuffers::Enum

    set_fully_qualified_name "polar_data.PbSleepWakeState"

    PB_WAKE = -2
    PB_REM = -3
    PB_NONREM1 = -4
    PB_NONREM2 = -5
    PB_NONREM3 = -6
  end

  module PbSleepUserRating
    include ::ProtocolBuffers::Enum

    set_fully_qualified_name "polar_data.PbSleepUserRating"

    PB_SLEPT_UNDEFINED = -1
    PB_SLEPT_POORLY = 0
    PB_SLEPT_SOMEWHAT_POORLY = 1
    PB_SLEPT_NEITHER_POORLY_NOR_WELL = 2
    PB_SLEPT_SOMEWHAT_WELL = 3
    PB_SLEPT_WELL = 4
  end

  class PbSleepWakePhase < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbSleepWakePhase"

    required :uint32, :seconds_from_sleep_start, 1
    required ::PolarData::PbSleepWakeState, :sleepwake_state, 2
  end

  class PbSleepAnalysisResult < ::ProtocolBuffers::Message
    set_fully_qualified_name "polar_data.PbSleepAnalysisResult"

    required ::PbLocalDateTime, :sleep_start_time, 1
    required ::PbLocalDateTime, :sleep_end_time, 2
    required ::PbSystemDateTime, :last_modified, 3
    required :uint32, :sleep_goal_minutes, 4
    repeated ::PolarData::PbSleepWakePhase, :sleepwake_phases, 5
    repeated ::PbLocalDateTime, :snooze_time, 6
    optional ::PbLocalDateTime, :alarm_time, 7
    optional :int32, :sleep_start_offset_seconds, 8, :default => 0
    optional :int32, :sleep_end_offset_seconds, 9, :default => 0
    optional ::PolarData::PbSleepUserRating, :user_sleep_rating, 10
    optional ::PbDeviceId, :recording_device, 11
    optional :bool, :battery_ran_out, 12, :default => false
  end

end
