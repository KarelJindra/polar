#!/usr/bin/env ruby
# Converts RAW Polar training session data files in Garmin GPX file format.

require 'time'
require 'nokogiri'
require "#{File.dirname(__FILE__)}/lib/polar_data_parser"

def usage
  puts "Usage:"
  puts "  #{__FILE__} <directory> [<gpx file>]"
end

dir = ARGV[0]
unless dir
  usage
  exit -2
end

output_file = ARGV[1] || File.join(dir, 'output.gpx')

def output_gpx(parsed)
  #sport = parsed[:sport]
  training_session = parsed[:training_session]
  #sensors = parsed[:sensors]
  samples = parsed[:samples]
  #exercise = parsed[:exercise]
  #laps = parsed[:exercise_laps]
  #exercise_stats = parsed[:exercise_stats]
  route_samples = parsed[:route_samples]

  start = DateTime.new(training_session.start.date.year, training_session.start.date.month, training_session.start.date.day, training_session.start.time.hour, training_session.start.time.minute, training_session.start.time.seconds, "%+i" % (training_session.start.time_zone_offset / 60)).to_time

  recording_interval = samples.recording_interval.hours * 3600 + samples.recording_interval.minutes * 60 + samples.recording_interval.seconds + (samples.recording_interval.millis.to_f / 1000)
  samples_count = samples.speed_samples.count
  #laps_count = laps ? laps.laps.count : 0
  route_samples_count = route_samples.latitude.count
  heart_rate_samples_count = samples.heart_rate_samples.count

  first_gps_fix = route_samples_count > 0 ? DateTime.new(route_samples.first_location_time.date.year, route_samples.first_location_time.date.month, route_samples.first_location_time.date.day, route_samples.first_location_time.time.hour, route_samples.first_location_time.time.minute, route_samples.first_location_time.time.seconds, '+0').to_time.utc : nil

  altitude_delta = 0
  altitude_calibration_samples = samples.altitude_calibration.each do |s|
    if s.operation == PbOperationType::SUM
      altitude_delta = s.value
    else
      STDERR.puts "Warning: Altitude calibration data of unsupported operation type ignored"
    end
  end if samples.altitude_calibration

  builder = Nokogiri::XML::Builder.new(:encoding => 'UTF-8') do |xml|
    xml.gpx('version' => "1.1",
            'xmlns' => "http://www.topografix.com/GPX/1/1",
            'xmlns:xsi' => "http://www.w3.org/2001/XMLSchema-instance",
            'xmlns:gpxtpx' => "http://www.garmin.com/xmlschemas/TrackPointExtension/v1",
            'creator' => 'https://github.com/cmaion/polar') {
      xml.metadata {
        xml.author {
          xml.name 'https://github.com/cmaion/polar'
        }
        xml.time start.iso8601
      }
      xml.trk {
        xml.trkseg {
          elapsed = recording_interval
          route_i = route_samples_count > 0 ? 0 : nil
          for i in 0..samples_count-1
            if route_i && route_samples.duration[route_i] && (
                (first_gps_fix - start - recording_interval <= elapsed) ||
                (route_samples.duration[route_i] / 1000 <= elapsed)
            )
              if route_samples.latitude[route_i]
                xml.trkpt(:lat => route_samples.latitude[route_i].round(8), :lon => route_samples.longitude[route_i].round(8)) {
                  xml.ele samples.altitude_samples[i] ? (samples.altitude_samples[i] + altitude_delta).round(3) : route_samples.gps_altitude[route_i].to_f
                  xml.time (start + elapsed).iso8601
                  xml.extensions {
                    xml['gpxtpx'].TrackPointExtension {
                      xml['gpxtpx'].atemp samples.temperature_samples[i].round(1) if samples.temperature_samples[i]
                      xml['gpxtpx'].hr samples.heart_rate_samples[i] if samples.heart_rate_samples[i] && samples.heart_rate_samples[i] > 0
                      xml['gpxtpx'].cad samples.cadence_samples[i] if samples.cadence_samples[i]
                    }
                  }
                }
              end
              route_i += 1
            end
            elapsed += recording_interval
          end
        }
      }
    }
  end
  builder.to_xml
end

puts "Converting Polar training session in '#{dir}' to Garmin GPX format as '#{output_file}'..."
parsed = PolarDataParser.parse_training_session(dir)
if parsed.key?(:training_session)
  File.open(output_file, 'w') do |f|
    f << output_gpx(parsed)
  end
  puts "Done"
else
  puts "Error: couldn't find training session"
end
